# This file specifies the configuration needed to test WebRender using the
# Taskcluster infrastructure. Most of this should be relatively self-explanatory;
# this file was largely generated by using the Taskcluster-GitHub integration
# quickstart tool at https://tools.taskcluster.net/quickstart/. The docker image
# used (staktrace/webrender-test:latest) was created using this Dockerfile:
# ---
#   FROM ubuntu:16.04
#   RUN apt-get -y update && apt-get install -y curl git python python-pip cmake pkg-config libx11-dev libgl1-mesa-dev libfontconfig1-dev
#   RUN pip install mako servo-tidy
#   RUN useradd -d /home/worker -s /bin/bash -m worker
#   USER worker
#   WORKDIR /home/worker
#   ENV PATH $PATH:/home/worker/.cargo/bin
#   CMD /bin/bash
# ---
#
# The docker image may need to be updated over time if the set of required
# packages increases. Note in particular that rust/cargo are not part of the
# docker image, and are re-installed using rustup on each CI run. This ensures
# the latest stable rust compiler is always used.
# CI runs will be triggered on opening PRs, updating PRs, and pushes to the
# repository.
#
version: 0
metadata:
  name: WebRender
  description: Runs WebRender tests in TaskCluster
  owner: '{{ event.head.user.email }}'
  source: '{{ event.head.repo.url }}'
tasks:
  - provisionerId: '{{ taskcluster.docker.provisionerId }}'
    workerType: '{{ taskcluster.docker.workerType }}'
    extra:
      github:
        events:
          - pull_request.opened
          - pull_request.synchronize
          - push
    payload:
      maxRunTime: 3600
      image: 'staktrace/webrender-test:latest'
      command:
        - /bin/bash
        - '--login'
        - '-c'
        - >-
          curl https://sh.rustup.rs -sSf | sh -s -- -y &&
          git clone {{event.head.repo.url}} webrender && cd webrender &&
          git checkout {{event.head.sha}} &&
          servo-tidy &&
          (cd webrender_traits && cargo test --verbose --features "ipc") &&
          (cd webrender_traits && cargo test --verbose) &&
          (cd webrender && cargo test --verbose) &&
          (cd sample && cargo test --verbose) &&
          (cd sample && cargo build --verbose --features=profiler) &&
          (cd wrench && cargo test --verbose) &&
          (cd wrench && cargo build --release --verbose --features headless) &&
          (cd wrench && python run_tests.py res/rect.yaml)
    metadata:
      name: CI tests
      description: Runs WebRender CI
      owner: '{{ event.head.user.email }}'
      source: '{{ event.head.repo.url }}'
